# ============================================
# NETWORKS
# ============================================
networks:
  iot-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${HADOOP_SUBNET}

# ============================================
# VOLUMES
# ============================================
volumes:
  namenode_data:
  datanode1_data:
  datanode2_data:
  yarn_logs:
  historyserver_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  spark_master_data:
  spark_worker1_data:
  spark_worker2_data:
  spark_history_data:
  mongodb_data:
  grafana_data:
  nifi_data:

# ============================================
# SERVICES
# ============================================
services:

  # ===============================
  # HDFS
  # ===============================
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    hostname: namenode
    restart: unless-stopped
    ports:
      - "${HDFS_NAMENODE_HTTP_PORT}:9870"
      - "${HDFS_NAMENODE_PORT}:9000"
    environment:
      CLUSTER_NAME: ${CLUSTER_NAME}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      CORE_CONF_hadoop_proxyuser_hue_hosts: "*"
      CORE_CONF_hadoop_proxyuser_hue_groups: "*"
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check: "false"
      HDFS_CONF_dfs_permissions_enabled: "false"
      HDFS_CONF_dfs_webhdfs_enabled: "true"
    volumes:
      - namenode_data:/hadoop/dfs/name
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    hostname: datanode1
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_datanode_data_dir: file:///hadoop/dfs/data
    volumes:
      - datanode1_data:/hadoop/dfs/data
    networks:
      - iot-network

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    hostname: datanode2
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_datanode_data_dir: file:///hadoop/dfs/data
    volumes:
      - datanode2_data:/hadoop/dfs/data
    networks:
      - iot-network

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    hostname: resourcemanager
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    ports:
      - "${YARN_RESOURCEMANAGER_PORT}:8088"
      - "8130:8030"
      - "8131:8031"
      - "8132:8032"
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_resourcemanager_scheduler_address: resourcemanager:8030
      YARN_CONF_yarn_resourcemanager_resource__tracker_address: resourcemanager:8031
      YARN_CONF_yarn_resourcemanager_webapp_address: resourcemanager:8088
      YARN_CONF_yarn_scheduler_minimum___allocation___mb: "512"
      YARN_CONF_yarn_scheduler_maximum___allocation___mb: "4096"
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_log___aggregation___enable: "true"
      YARN_CONF_yarn_log_server_url: http://historyserver:8188/applicationhistory/logs/
    networks:
      - iot-network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    hostname: nodemanager1
    restart: unless-stopped
    depends_on:
      resourcemanager:
        condition: service_started
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_nodemanager_aux___services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_nodemanager_vmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_pmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage: "95"
    networks:
      - iot-network

  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    hostname: nodemanager2
    restart: unless-stopped
    depends_on:
      resourcemanager:
        condition: service_started
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_nodemanager_aux___services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_nodemanager_vmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_pmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage: "95"
    networks:
      - iot-network

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    hostname: historyserver
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    ports:
      - "8288:8188"
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_timeline___service_enabled: "true"
      YARN_CONF_yarn_timeline___service_generic___application___history_enabled: "true"
      YARN_CONF_yarn_log___aggregation___enable: "true"
    volumes:
      - historyserver_data:/hadoop/yarn/timeline
    networks:
      - iot-network

  # ===============================
  # KAFKA
  # ===============================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    restart: unless-stopped
    user: root
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*" 
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports :
      - "2181:2181"
    networks:
      - iot-network
    #healthcheck:
      #test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      #interval: 30s
      #timeout: 10s
      #retries: 3
      #start_period: 60s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9192:9092"
      - "9193:9093"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9192,INTERNAL://kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_LOG_RETENTION_BYTES: ${KAFKA_LOG_RETENTION_BYTES}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - iot-network

  # ===============================
  # SPARK
  # ===============================
  spark-master:
    build:
      context: ./infrastructure/spark
      dockerfile: Dockerfile
    hostname: spark-master
    restart: unless-stopped
    user: root
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "7177:7077"
      - "8180:8080"
      - "4140:4040"
    environment:
      SPARK_MASTER_HOST: 0.0.0.0
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
    volumes:
      - spark_master_data:/opt/spark/work-dir
      - ./spark_scripts:/opt/spark/work-dir
    networks:
      - iot-network

  spark-worker-1:
    build:
      context: ./infrastructure/spark
      dockerfile: Dockerfile
    hostname: spark-worker-1
    depends_on:
      - spark-master
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8181:8081"
    environment:
      SPARK_WORKER_WEBUI_PORT: 8081
    volumes:
      - spark_worker1_data:/opt/spark/work-dir
      - ./spark_scripts:/opt/spark/work-dir
    networks:
      - iot-network

  spark-worker-2:
    build:
      context: ./infrastructure/spark
      dockerfile: Dockerfile
    hostname: spark-worker-2
    depends_on:
      - spark-master
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8182:8082"
    environment:
      SPARK_WORKER_WEBUI_PORT: 8082
    volumes:
      - spark_worker2_data:/opt/spark/work-dir
      - ./spark_scripts:/opt/spark/work-dir
    networks:
      - iot-network

  # ===============================
  # MONGODB
  # ===============================
  mongodb:
    image: mongo:6.0
    hostname: mongodb
    restart: unless-stopped
    ports:
      - "27027:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
     - mongodb_data:/data/db
    networks:
      - iot-network

  # ===============================
  # GRAFANA
  # ===============================
  grafana:
    image: grafana/grafana:10.2.2
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3100:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - iot-network
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: "frser-sqlite-datasource, marcusolsson-json-datasource, grafana-mongodb-datasource"

  # ===============================
  # NIFI
  # ===============================
  nifi:
    image: apache/nifi:1.27.0
    container_name: nifi
    hostname: nifi
    restart: unless-stopped
    ports:
      - "8443:8443"  # même port interne et externe = plus simple sous WSL
    environment:
      NIFI_WEB_HTTPS_PORT: 8443
      NIFI_WEB_PROXY_HOST: "localhost:8443,127.0.0.1:8443,nifi:8443"
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: rootrootrootroot
    volumes:
      - nifi_data:/opt/nifi/nifi-current
      - ./nifi_scripts:/opt/nifi/scripts
      - ./nifi_templates:/opt/nifi/templates
    command: ["/bin/bash", "-c", "/opt/nifi/scripts/import_template.sh & exec /opt/nifi/nifi-current/bin/nifi.sh run"]
    networks:
      - iot-network

  api-mongo:
    build: ./api_mongo
    container_name: api-mongo
    restart: unless-stopped
    depends_on:
      - mongodb
    ports:
      - "5000:3001"
    environment:
      MONGO_USER: ${MONGO_ROOT_USER}
      MONGO_PASS: ${MONGO_ROOT_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DBNAME: ${MONGO_DB}
    networks:
      - iot-network
